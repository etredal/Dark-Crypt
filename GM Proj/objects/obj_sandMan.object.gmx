<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sandManDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set
hp = 8;
drop = obj_shineRed;
slowSpd = 0.4;
fastSpd = 0.8;

//shooting timer
shotTimerReset = 4 * room_speed;
shotTimer = 0;

path = false;

noAction = true;
idle = false;
pursue = false;
attack = false;

//Setting initial move points
iX = -1;
iY = -1;

//Random offset
rX = 0;
rY = 0;

//Lantern
lantern = instance_create(x,y,obj_sandManLantern);
lantern.sandManID = instance_id;

//Distances
minDis = irandom_range(60,90);
midDis = irandom_range(185,215);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI
//depth
depth = -y;

//vars
var dis = point_distance(obj_player.x,obj_player.y,x,y);
var l = collision_line(obj_player.x,obj_player.y,x,y,all,false,true);

//Action Setting
if (object_get_solid(l) == false) {
    if (dis &gt;= 1000) {
        noAction = true;
        idle = false;
        pursue = false;
        attack = false;
    } else if (dis &lt; 1000) &amp;&amp; (dis &gt; midDis) {
        noAction = false;
        idle = true;
        pursue = false;
        attack = false;
    } else if (dis &lt;= midDis) &amp;&amp; (dis &gt;= minDis) {
        noAction = false;
        idle = false;
        pursue = true;
        attack = false;
    } else if (dis &lt; minDis) {
        noAction = true;
        idle = false;
        pursue = false;
        attack = true;
    }
} else {
    if (dis &gt;= 1000) {
        noAction = true;
        idle = false;
        pursue = false;
        attack = false;
    } else {
        noAction = false;
        idle = true;
        pursue = false;
        attack = false;
    }
}

//NO ACTION
if (noAction == true) {
    //Setting
    speed = 0;
    image_speed = 0;
    image_index = 0;
    sprite_index = spr_sandManDown;
}

//IDLE
if (idle == true) {
    if (path == false) {
        iX = irandom_range(x - 64,x + 64);
        iY = irandom_range(y - 64,y + 64);
        
        path = true;
    }
    
    if (path == true) {
        move_towards_point(iX,iY,slowSpd);
    }
    
    var pDis = point_distance(x,y,iX,iY);
    
    if (path == true) &amp;&amp; (pDis &lt; 3) {
        speed = 0;
        
        //Random Move Again
        var ran = irandom(2 * room_speed);
        if (ran == 1) {
            path = false;
        }
    }
}

//PURSUE
if (pursue == true) {
    if (rX = 0) {
        rX = irandom_range(-8,8);
    }
    
    if (rY = 0) {
        rY = irandom_range(-8,8);
    }

    move_towards_point(obj_player.x + rX,obj_player.y + rY,fastSpd);
}

//ATTACK
if (attack == true) {
    speed = 0;
    
    shotTimer--;
    
    if (shotTimer &lt;= 0) {
        instance_create(lantern.x,lantern.y,obj_sandManShot);
        instance_create(lantern.x,lantern.y,obj_sandManShot);
        instance_create(lantern.x,lantern.y,obj_sandManShot);
        
        shotTimer = shotTimerReset;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting
//No motion
if (speed == 0) {
    image_speed = 0;
    
    rX = 0;
    rY = 0;
}

//Setting Sprite
if (speed &gt; 0) {
    if (direction &lt;= 45 || direction &gt;= 315) {
        sprite_index = spr_sandManRight;
        
        lantern.x = x + 8;
        lantern.y = y + 8;
        lantern.depth = -y;
    } else if (direction &gt;= 45 &amp;&amp; direction &lt;= 135) {
        sprite_index = spr_sandManUp;
        
        lantern.x = x + 4;
        lantern.y = y + 4;
        lantern.depth = -y;
    } else if (direction &gt;= 135 &amp;&amp; direction &lt;= 225) {
        sprite_index = spr_sandManLeft;
        
        lantern.x = x + 3;
        lantern.y = y + 3;
        lantern.depth = -y;
    } else if (direction &gt;= 225 &amp;&amp; direction &lt;=315) {
        sprite_index = spr_sandManDown;
        
        lantern.x = x + 2;
        lantern.y = y + 2;
        lantern.depth = -y;
    }
}

//Anim Speed
if (speed == slowSpd) {
    image_speed = 0.05;
}

if (speed == fastSpd) {
    image_speed = 0.1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
if (!place_free(x+hspeed,y+vspeed)) {
    hspeed = 0;
    vspeed = 0;
    
    image_speed = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
